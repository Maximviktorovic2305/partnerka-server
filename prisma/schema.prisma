generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String?
  lastname String?
  email    String  @unique
  password String

  isAdmin Boolean @default(false)

  partners      Partner[]
  leads         Lead[]
  referralLinks ReferralLink[]
  offers        Offer[]
  withdraws     Withdraw[]
}

model Partner {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name         String?
  lastname     String?
  email        String? @unique
  registerDate String?

  phone          String?
  balance        Int?    @default(0)
  balanceToAwait Int?    @default(0)
  totalAwards    Int?    @default(0)

  status String? @default("Базовый")

  leads        Lead[]
  referralLink ReferralLink[]
  offer        Offer?         @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId      Int?

  withdraws Withdraw[]

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Lead {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  createdFormatedDate String?
  updatedFormatedDate String?

  name   String?
  sourse String? @default("Прямое добавление")
  status String? @default("Новый")

  offer  String?
  amount Int?

  partner   Partner?   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId Int?
  withdraw  Withdraw[]

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model ReferralLink {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String?

  createdFormatedDate String?
  updatedFormatedDate String?

  partner   Partner? @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId Int?

  hash String? @unique

  viewCount       Int? @default(0)
  viewUniqueCount Int? @default(0)

  localeLinkPath String?
  serverLinkPath String?
  conversions    Int?    @default(0)

  amountToAwait Int? @default(0)
  amountToPay   Int? @default(0)

  offer   Offer? @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId Int?

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Offer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name          String?
  domain        String? @default("http://localhost:3533")
  conversions   Int?    @default(0)
  amount        Int?    @default(0)
  status        String? @default("active")
  partnersCount Int?    @default(0)

  partners      Partner[]
  refferalLinks ReferralLink[]

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Withdraw {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  createdFormatedDate String?

  partner   Partner? @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId Int?

  isPaydOut Boolean? @default(false)

  partnerEmail String?
  lead         Lead?   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId       Int?
  leadName     String?

  comment String?
  amount  Int?                     

  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int?
}
